import socket
import SecureVault as sv
import random

#TODO: eigene Klasse
n = 1000 # size of key vault == number of keys K[0] ... K[n-1]
p = 200  # size of challenge, *p<n* 
randmax = 1e10
buffer=1024

def generateChallenge(amountOfItems):
    challengeSet = []
    while len(challengeSet)<200:
        challengeSet.append(random.randint(0,n-1))
    return challengeSet

def xor_bytes(b1, b2):
    # Ensure both are of the same length
    return bytes(a ^ b for a, b in zip(b1, b2))


# Client setup
client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
server_address = ('localhost', 12346)


#Device settings
DeviceId = 1337
SessionId = 42
Vault = sv
Vault.initialize(n)

try:
    #Send first message
    M1 = str(DeviceId) + str(SessionId)

    client_socket.sendto(M1.encode(), server_address)
    print("M1 gesendet")  
            
    # Receive M2 from server
    data, addr = client_socket.recvfrom(buffer)
    print("Daten empfangen")
    #print(f"Received data: {data.decode()}")

    C1_received = generateChallenge(p)  #TODO: aus received data rausnehmen

    #Check if correct randomness
    if(False):    #TODO: r1 rausziehen r1_received!=r1
        print("Error, not the correct randomness")
        client_socket.close() 


    # Generate key k1 from the keys in the challenge    
    k1 = bytes(512) #TODO: schlüssellänge aus vault
    for i in C1_received:
        print(".")
        k1 = xor_bytes(k1, Vault.getKey(i))
        
    t1 = random.randint(0, randmax) #random number generated by the IoT device
    C2 = generateChallenge(p)
    
    while set(C2) == set(C1_received):
        C2 = generateChallenge(p)
        print(",")

    #while(C2.sort() == C1_received.sort()):
    #   C2 = generateChallenge(p)
    #    print(",")
    r2 = random.randint(0,randmax)
    print(r2)

    #Send M3 to server
    M3 = "blavlavlavla" #TODO: Enc(k1, r1||t1||{C2,r2})
    client_socket.sendto(M3.encode(), server_address)
    print("M3 gesendet")  
  
    # Receive M4 from server
    data, addr = client_socket.recvfrom(buffer)
    message4= data.decode()
    print(f"Received data: {message4}")

    #TODO: decrypt with k2 XOR t1 -> steht r2 drin?

    if(True): #r2 in M4
        print("hat alles gepasst. yippieeeehhehhe")
    else:
        print("uppsssiiii")
except socket.error as e:
        print(f"Something failed: {e}")
finally:
    # Change keys in vault and close the socket
    Vault.changeKeys("irgendwas") #TODO: richtige Message reinschreiben

    client_socket.close()
    print("Client Socket was closed")
